<div id="drag-upload-back">
	<div id="drag-upload"><p>Déposez vos fichiers</p></div>
</div>
<div id="global" class="blurable">

	<div id="left">
		<div id="tree" class="tree"></div>
		<div id="searchs"></div>
		<div id="tree_cursor"></div>
		<div id="activity" class="bouncy-bottom bounce"><img draggable="false" src="$context.getRequestAddr()resources/style/icons/spinner.gif"><p>Chargement...</p></div>
	</div>
	
	<div id="right">
		<nav id="options">
			<ul type="menu">
				<li action="new_file"><a href="#" >Nouveau fichier</a></li>
				<li action="new_dir"><a href="#">Nouveau dossier</a></li>
				<li action="change_order"><a href="#">Organisation</a></li>
				<li action="change_view">
					<a href="#">Affichage</a>
				</li>
				<li><a class="glyphicon glyphicon-search" action="search" href="#"></a><input type="text" id="search"/></li>
				<li action="logout" class="logout"><a href="#"><span class="glyphicon glyphicon-log-out"></span> Déconnexion</a></li>
			</ul>
		</nav>
		<div id="content" class="blurable"></div>
	</div>
</div>
<script src="$context.getRequestAddr()resources/js/utils.js"></script>
<script src="$context.getRequestAddr()resources/js/action.js"></script>
<script src="$context.getRequestAddr()resources/js/folder.js"></script>
<script src="$context.getRequestAddr()resources/js/tree.js"></script>
<script src="$context.getRequestAddr()resources/js/menu.js"></script>
<script src="$context.getRequestAddr()resources/js/popup.js"></script>
<script src="$context.getRequestAddr()resources/js/search.js"></script>
<script type="text/javascript">
	
	// Variables
	var global = $('#global');
	var pop_up_back = $('#pop_up_back');
	var right = $('#right');
	var left = $('#left');
	var tree_cursor = $('#tree_cursor');

	function startLoading(title) {
		$('#activity p').text(title);
		$('#activity').addClass('bounce');
	}

	function stopLoading() {
		$('#activity').removeClass('bounce');
	}
	
	var endpoint = '$context.getRequestAddr()';
	
	// Mobile performance fix
	if(window.onMobile()) {
		$(".blurable").removeClass('blurable');
	}
	
	// Elements creation
	var folder;     // Folder view (left panel)
	var tree;       // Tree (right panel)
	var menu;       // Contextual menu
	var searchList; // Search list (left panel)

	var contructContextualMenu = function(element, e) {
		if(!element.path) {
			var folder_nb = 0;
			var file_nb = 0;
			var file_total = 0;
			var reference;

			$.each(element, function(UID, value) {
				if(!(value.size === undefined)) {
					file_nb++;
					file_total += value.size;
				} else {
					folder_nb++;
				}

				if(!reference)
					reference = value;
			});

			menu.display( [
				{ info : true, name : "Selection", value : (folder_nb + file_nb) + " élément(s) sélectionné(s)" },
				{ info : true, name : "Chemin", value : reference.path },
				{ info : true, name : "Taille (totale)", value : sizeFormat(file_total) },

				( file_nb > 0 ?   { button : true, name : "Télécharger les fichiers (" + file_nb + ")", icon : "cloud-download", action :
					function() {
						if(!folder.in_update)
							$.each(element, function(UID, value) {
								window.open(endpoint + "api/file-bin" + value.path + value.name, "_blank");
							});
					}
				} : {}),
				( folder_nb > 0 ? { button : true, name : "Ouvrir les dossiers (" + folder_nb + ")", icon : "log-in", action :
					function() {
						if(!folder.in_update)
							$.each(element, function(UID, value) {
								window.open(endpoint + "~" + value.path + value.name, "_blank");
							});
					}
				} : {}),
				{ button : true, name : "Déplacer la sélection", icon : "share-alt", action:
					function() {
						console.log(element)
						new ResourceMoveWindow(element).on('done', function() {
								tree.update();
							}).display();
					}
				},
				{ button : true, name : "Supprimer la sélection", icon : "trash", action:
					function() {
						console.log(element)
						new ResourceDeletionWindow(element).on('done', function() {
								tree.update();
							}).display();
					}
				},
			], e.pageX, e.pageY);
		} else if(!(element.size === undefined)) {
			menu.display( [
				{ info : true, name : "Nom", value : element.name },
				{ info : true, name : "Chemin", value : element.path },
				{ info : true, name : "Type", value : element.type },
				{ info : true, name : "Taille", value : sizeFormat(element.size) },
				{ info : true, name : "Création", value : new Date(element.creationDate).toLocaleString() },
				{ info : true, name : "Modification", value : new Date(element.modificationDate).toLocaleString() },

				{ button : true, name : "Télécharger le fichier", icon : "cloud-download", action :
					function() {
						if(!folder.in_update)
							window.open(endpoint + "api/file-bin" + element.path + element.name, "_blank");
					}
				},
				{ button : true, name : "Partager le fichier", icon : "cloud-download", action :
					function() {
						if(!folder.in_update)
							new ShareFileAction().on('done', function(done, error, fail) {
								stopLoading();
							}).proceed(element);
					}
				},
				{ button : true, name : "Renommer le fichier", icon : "pencil", action :
					function() {
						if(!folder.in_update) {
							new FileRenamingWindow(element).on('done', function(popUp, data) {
								tree.select(element.UID); tree.update();
							}).display();
						}
					}
				},
				{ button : true, name : "Déplacer le fichier", icon : "share-alt", action :
					function() {
						if(!folder.in_update)
							new ResourceMoveWindow(element).on('done', function() {
								tree.select(element.UID); tree.update();
							}).display();
					}
				},
				{ button : true, name : "Supprimer le fichier", icon : "trash", action :
					function() {
						if(!folder.in_update) {
							new ResourceDeletionWindow(element).on('done', function() {
								tree.update();
							}).display();
						}
					}
				}
			], e.pageX, e.pageY);
		} else {
			menu.display( [
				(element.name ? { info : true, name : "Nom", value : element.name } : 0 ),
				{ info : true, name : "Chemin", value : element.path },
				(element.name ? { info : true, name : "Création", value : new Date(element.creation).toLocaleString() } : 0 ),
				(element.name ? { info : true, name : "Modification", value : new Date(element.edit).toLocaleString() } : 0 ),

				{ button : true, name : "Ouvrir le dossier", icon : "log-in", action :
					function() {
						if(!folder.in_update)
							tree.select(element.UID);
					}
				},
				{ button : true, name : "Ouvrir dans une nouvelle fenêtre", icon : "new-window", action :
					function() {
						if(!folder.in_update)
							window.open(endpoint + "~" + element.path + element.name, "_blank");
					}
				},
				(element.name ? { button : true, name : "Renommer le dossier", icon : "pencil", action :
					function() {
						if(!folder.in_update)
							new DirectoryRenamingWindow(element).on('done', function(popUp, data) {
								tree.select(tree.selected.UID); tree.update();
							}).display();
					}
				} : 0),
				(element.name ? { button : true, name : "Déplacer le dossier", icon : "share-alt", action :
					function() {
						if(!folder.in_update)
							new ResourceMoveWindow(element).on('done', function() {
								tree.select(tree.selected.UID); tree.update();
							}).display();
					}
				} : 0),
				(element.name ? { button : true, name : "Supprimer le dossier", icon : "trash", action :
					function() {
						if(!folder.in_update) {
							new ResourceDeletionWindow(element).on('done', function() {
								tree.select_path(element.path);
								tree.update();
							}).display();
						}
					}
				} : 0)
			], e.pageX, e.pageY);
		}
	}

	// Construct the tree view
	tree = new DirectoryTree($('#tree'));
	tree.on('select', function(element, node, e, ignorePushState) {
		tree.disable_selection();
		searchList.deselect();

		startLoading("Ouverture dossier...");

		folder.update(element, node.parent ? node.parent.directory : null);

		if(!ignorePushState) {
			if(element.name)
				window.history.pushState(element, "node", endpoint + '~' + element.path + element.name);
			else	
				window.history.pushState(element, "node", endpoint + '~/');
		}
	});
	tree.on('select_contextual', function(element, node, e) {
		contructContextualMenu(element, e);
	});

	// Construct search list
	searchList = new SearchList($('#searchs'));
	searchList.on('select', function(node, result, e) {
		folder.updateFrom(node.results, node.value);
		tree.deselect();
	});

	// Construct the folder view
	folder = new Folder($('#content'));
	folder.on('select', function(element) {
		if(isFile(element)) {
			if(element.type.match("^image"))
				new ImagePreviewWindow(element).display();
			else
				window.open(endpoint + "api/file-bin" + element.path + element.name, "_blank");
		} else
			tree.select(element.UID);
	});
	folder.on('select_context', function(element, e) {
		contructContextualMenu(element, e);
	});
	folder.on('update', function(element) {
		tree.enable_selection();

		stopLoading();
	});

	// Construct the contextual menu
	menu = new ContextualMenu(folder, tree);
	
	#if ( $context.getParameterUnique('_path') )
		tree.update("$context.getParameterUnique('_path')");
	#else
		tree.update();
	#end
	searchList.update();
	
	// Event binding (Option menu)
	$('[action=new_dir]').on('click', function(e) {
		if(tree.selected) {
			new DirectoryCreationWindow(tree.selected.directory).on('done', function() {
				tree.update();
			}).display();
		}
	});
	
	$('[action=new_file]').on('click', function(e) {
		if(tree.selected) {
			new FileCreationWindow(tree.selected.directory).on('done', function() {
				tree.update();
			}).display();
		}
	});

	$('#search').on('keypress', function(e) {
		if (e.which == 13) {
			$('[action=search]').trigger('click');
		}
	});

	$('[action=search]').on('click', function(e) {

		var val = $('#search').val();
		$('#search').val('');

		performSearch(val, tree, folder, searchList);
	});

	// Draggable left panel
	var clicked = false;
	var last = null;
	tree_cursor.on('mousedown', function(e) {
		clicked = true;
		last = e;
	});

	global.on('mouseup', function(e) {
		clicked = false;
	});

	global.on('mousemove', function(e) {
		if(clicked) {
			left.width(left.width() + (e.pageX - last.pageX));
			last = e;
		}
	});
	
	// Back button handling
	window.onpopstate = function(e) {
		var folder = e.state;
		var title = e.title;
	
		if(folder) {
			tree.select(folder.UID, true);
		}
	}

	
	
	var elem_change_order = $('[action=change_order]');
	var view = "normal";
	// Bar button
	$('[action=change_order]').on('click', function(e) {

		var element = $('<div class="drop-menu"></div>');

		var iconView = $('<div class="option-item">Icônes</div>');
		var tableView = $('<div class="option-item">Tableau</div>');
		
		iconView.on('click', function() {
			element.remove();
			view = "icon";
			folder.folderRenderer = new FolderIconRenderer();
			folder.refresh();
		});

		tableView.on('click', function() {
			element.remove();
			view = "table";
			folder.folderRenderer = new FolderTableRenderer();
			folder.refresh();
		});

		if (view == "table")
			tableView.addClass("lightred");
		else if (view == "icon" || view == "normal")
			iconView.addClass("lightred");
		
		$('body').append(element.append(iconView).append(tableView));

		element.css('position', 'absolute');
		element.css('top', (elem_change_order.offset().top + elem_change_order.height()) + 'px');
		element.css('left', elem_change_order.offset().left + 'px');
		element.css('min-width', elem_change_order.width() + 'px');

		element.on('mouseleave', function(e) {
			element.remove();
		});
	});
	
	
	var elem_change_view = $('[action=change_view]');
	var size = "normal";
	// Bar button
	$('[action=change_view]').on('click', function(e) {

		var element = $('<div class="drop-menu"></div>');
		
		var smallView = $('<div class="option-item">Petit</div>');
		var largeView = $('<div class="option-item">Normal</div>');

		function toSmallSizeView() {
			var elem = $('#right #content ul, #right #content table');
			elem.removeClass();
			elem.addClass('smallView');
	
		};
	
		function toLargeSizeView() {
			var elem = $('#right #content ul, #right #content table');
			elem.removeClass();
			elem.addClass('largeView');
		};
		
		smallView.on('click', function() {
			element.remove();
			size = "small";
			toSmallSizeView();			
		});

		largeView.on('click', function() {
			element.remove();
			size = "large";
			toLargeSizeView();			
		});

		if (size == "small") 
			smallView.addClass("lightred");
		else if(size == "large" || size == "normal")
			largeView.addClass("lightred");
		
		$('body').append(element.append(smallView).append(largeView));

		element.css('position', 'absolute');
		element.css('top', (elem_change_view.offset().top + elem_change_view.height()) + 'px');
		element.css('left', elem_change_view.offset().left + 'px');
		element.css('min-width', elem_change_view.width() + 'px');

		element.on('mouseleave', function(e) {
			element.remove();
		});
	});
	
	$('[action=logout]').on('click', function(e) {
		$.ajax(endpoint + "api/logout/").done(function(){
			window.location.reload();
		});		
	});

	// Drag & drop
	$(document).on('dragenter', function (e) {
	    e.stopPropagation();
	    e.preventDefault();
	});

	$(document).on('dragover', function (e) {
		e.stopPropagation();
		e.preventDefault();
	});

	$(document).on('dragleave', function (e) {
		e.stopPropagation();
		e.preventDefault();
	});

	$(document).on('drop', function(e) {
	    e.preventDefault();  
	    e.stopPropagation();

		$('#drag-upload-back').fadeOut();

	     var file = e.originalEvent.dataTransfer.files[0];

	     if(file) {
			if(!isNameValid(file.name)) {
				toastHandler.add(new Toast("Impossible d'envoyer le fichier", "Le nom '" + file_name + "' n'est pas valide", "error"));
				return;
			}

			startLoading("Upload fichier...");

			new CreateFileAction().on('done', function(done, error, fail) {
				stopLoading();
				tree.update();
			}).proceed(tree.selected.directory, file);
	     }
	})


	// Now that we have a plugin, we can listen for the new events 
	$(document).draghover().on({
		'draghoverstart': function() {
			$('#drag-upload-back').fadeIn();
		},
		'draghoverend': function() {
			$('#drag-upload-back').fadeOut();
		}
	});

	var toastHandler = new ToastHandler($("#toast_back"));

</script>